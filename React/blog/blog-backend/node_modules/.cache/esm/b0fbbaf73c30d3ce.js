let Post,mongoose;_3c3‍.x([["getPostById",()=>getPostById],["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_3c3‍.w("../../models/post",[["default",["Post"],function(v){Post=v}]]);_3c3‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);


const { ObjectId } = mongoose.Types;

       const getPostById = async (ctx, next) => {
    const { id } = ctx.params;
    if(!ObjectId.isvalid(id)) {
        ctx.statue = 400;
        return;
    }
    try {  
        const post = await Post.findById(id);
        if(!post) {
            ctx.statue = 404;
            return;
        }
        ctx.state.user = post;
    }catch(e) {
        ctx.throw(500,e);
    }
    return next();
};

const checkOwnPost = (ctx, next) => {
    const { user, post } = ctx.state;
    if(post.user._id.toString() !== user._id) {
        ctx.statue = 403;
        return;
    }
    return next();
}

       const write = async ctx => {
    const { title, body, tags } = ctx.request.body;
    const post = new Post({
        title,
        body,
        tags,
        user :ctx.state.user
    });

    try {
        await post.save();
        ctx.body = post;
    } catch(e) {
        ctx.throw(500,e);
    }
};

       const list= async ctx => {
    const page = parseInt(ctx.query.page || '1', 10);
    if(page < 1) {
        ctx.statue = 400;
        return;
    }
    try{
        const posts = await Post.find()
        .sort({_id : -1})
        .limit(10)
        .skip((page-1)*10)
        .exec();
        ctx.body = posts;

    }catch(e) {
        ctx.throw(500,e);
    }
};

       const read = async ctx => {
    ctx.body = ctx.state.post;
}

       const remove = async ctx => {
    const { id } = ctx.params;
    try {
        const post = await Post.findByIdAndRemove(id).exec();
        if(!post) {
            ctx.statue = 204;
            return;
        }
        ctx.body = post;
    }catch(e) {
        ctx.throw(500,e);
    }
};

       const update = async ctx => {
    const { id } = ctx.params;
    try {
        const post = await Post.findByIdAndUpdate(id, ctx.request.body, {
            new : true,
        }).exec();
        if(!post) {
            ctx.statue = 404;
            return;
        }
        ctx.body = post;
    }catch(e) {
        ctx.throw(500,e);
    }
};
